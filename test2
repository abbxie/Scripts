local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local root = character:WaitForChild("HumanoidRootPart")

local worldBlocks = workspace:WaitForChild("WorldBlocks")

-- Highlight object
local highlight = Instance.new("SelectionBox")
highlight.LineThickness = 0.05
highlight.SurfaceTransparency = 0.5
highlight.Color3 = Color3.fromRGB(255, 0, 0)
highlight.Parent = game.CoreGui

-- Track last movement direction
local lastDirection = Vector3.new(0, 0, 1) -- default facing forward (Z+)

-- Update lastDirection whenever player moves
root:GetPropertyChangedSignal("Position"):Connect(function()
    local moveVector = (root.Position - root.Position) -- small delta each frame
    if moveVector.Magnitude > 0.01 then
        if math.abs(moveVector.X) > math.abs(moveVector.Z) then
            lastDirection = Vector3.new(math.sign(moveVector.X), 0, 0)
        else
            lastDirection = Vector3.new(0, 0, math.sign(moveVector.Z))
        end
    end
end)

-- Function to find Dirt straight ahead (2D axis)
local function getDirtStraight2D()
    local closest = nil
    local shortestDist = math.huge
    local playerPos = root.Position

    for _, block in ipairs(worldBlocks:GetChildren()) do
        local dirt = block:FindFirstChild("Dirt")
        if dirt and dirt:IsA("BasePart") then
            local dirToDirt = dirt.Position - playerPos
            local alongAxis = lastDirection.X ~= 0 and math.sign(dirToDirt.X) == lastDirection.X
                             or lastDirection.Z ~= 0 and math.sign(dirToDirt.Z) == lastDirection.Z

            if alongAxis then
                local dist = dirToDirt.Magnitude
                if dist < shortestDist then
                    shortestDist = dist
                    closest = dirt
                end
            end
        end
    end

    return closest
end

-- Update loop
while task.wait(0.2) do
    local dirtAhead = getDirtStraight2D()
    if dirtAhead then
        highlight.Adornee = dirtAhead
    else
        highlight.Adornee = nil
    end
end
