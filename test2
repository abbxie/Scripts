local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local root = character:WaitForChild("HumanoidRootPart")

local worldBlocks = workspace:WaitForChild("WorldBlocks")

-- ðŸ”§ SETTINGS
local FRONT_ONLY = true    -- highlight only in front of player
local UP_ONLY = false      -- highlight only above player
local DOWN_ONLY = false    -- highlight only below player

-- thresholds
local DOT_THRESHOLD = 0.5  -- "front" strictness (1 = straight ahead, 0 = wide)
local Y_THRESHOLD = 2      -- leeway for up/down checks

-- Highlight object
local highlight = Instance.new("SelectionBox")
highlight.LineThickness = 0.05
highlight.SurfaceTransparency = 0.5
highlight.Color3 = Color3.fromRGB(255, 0, 0)
highlight.Parent = game.CoreGui -- put in CoreGui so it stays visible

-- Function to check if block passes direction filters
local function passesDirectionFilters(dirt)
    local pos = dirt.Position
    local rootPos = root.Position

    -- front check
    if FRONT_ONLY then
        local lookVector = root.CFrame.LookVector
        local dirToBlock = (pos - rootPos).Unit
        local dot = lookVector:Dot(dirToBlock)
        if dot <= DOT_THRESHOLD then
            return false
        end
    end

    -- up check
    if UP_ONLY and not (pos.Y > rootPos.Y + Y_THRESHOLD) then
        return false
    end

    -- down check
    if DOWN_ONLY and not (pos.Y < rootPos.Y - Y_THRESHOLD) then
        return false
    end

    return true
end

-- Function to find closest Dirt
local function getClosestDirt()
    local closest = nil
    local shortestDist = math.huge

    for _, block in ipairs(worldBlocks:GetChildren()) do
        local dirt = block:FindFirstChild("Dirt")
        if dirt and dirt:IsA("BasePart") then
            if passesDirectionFilters(dirt) then
                local dist = (dirt.Position - root.Position).Magnitude
                if dist < shortestDist then
                    shortestDist = dist
                    closest = dirt
                end
            end
        end
    end

    return closest
end

-- Update loop
while task.wait(0.2) do
    local closest = getClosestDirt()
    if closest then
        highlight.Adornee = closest
    else
        highlight.Adornee = nil
    end
end
