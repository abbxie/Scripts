local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
print("Rayfield loaded successfully")

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    }
})

local MainTab = Window:CreateTab("AutoFarm", 4483362458)
local Section = MainTab:CreateSection("AutoHatch")

local player = game.Players.LocalPlayer
local debrisFolder = workspace:FindFirstChild("Visual") and workspace.Visual:FindFirstChild("Debris")
local camera = workspace.CurrentCamera
local input = game:GetService("VirtualInputManager")

local running = false

local Toggle = MainTab:CreateToggle({
    Name = "AutoTap",
    CurrentValue = false,
    Flag = "ToggleAutoTap",
    Callback = function(Value)
        running = Value
        if running then
            -- Run the loop in a separate task to avoid blocking the UI
            task.spawn(function()
                while running do
                    if not debrisFolder then
                        warn("workspace.Visual.Debris not found")
                        task.wait(5)
                    else
                        local character = player.Character or player.CharacterAdded:Wait()
                        local hrp = character:WaitForChild("HumanoidRootPart")

                        for _, child in ipairs(debrisFolder:GetChildren()) do
                            if not running then break end
                            if child:IsA("BasePart") and child.Name ~= "Part" and child.Parent == debrisFolder then
                                -- Teleport above the child
                                hrp.CFrame = child.CFrame + Vector3.new(0, 3, 0)
                                task.wait(0.2)

                                -- Convert world position to screen position
                                local screenPos, onScreen = camera:WorldToViewportPoint(child.Position)
                                if onScreen then
                                    -- Simulate mouse click at that screen position
                                    input:SendMouseButtonEvent(screenPos.X, screenPos.Y, 0, true, game, 0)  -- mouse down
                                    input:SendMouseButtonEvent(screenPos.X, screenPos.Y, 0, false, game, 0) -- mouse up
                                    print("Clicked:", child.Name)

                                    -- Wait until the object is removed or toggle off
                                    while child.Parent == debrisFolder and running do
                                        task.wait(0.1)
                                    end
                                    print(child.Name .. " removed or toggled off.")
                                else
                                    print(child.Name .. " is off-screen.")
                                end
                            end
                        end
                    end
                    task.wait(1) -- wait a bit before next full loop
                end
            end)
        end
    end,
})
