--loadstring(game:HttpGet('https://raw.githubusercontent.com/abbxie/Scripts/refs/heads/main/Pet%20Star%20Sim%20Script'))() 
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() -- Load Rayfield library
print("Rayfield loaded successfully")

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Specify a folder name if needed
        FileName = "Big Hub"
    }
})

local MainTab = Window:CreateTab("AutoFarm", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("AutoFarm")


local locations = {
    "SPAWN", "Autumn Forest", "Flower Garden", "Snow Forest", "Tropical Palms",
    "Mine Shaft", "Diamond Mine", "Magical Forest", "Sakura Forest", "Sakura Ravine",
    "Magma Ravine", "Cloud Road", "Heaven", "Toxic Wasteland", "Sandy Star Bay",
    "EVENT", "Heart Forest", "Green Heart Forest", "Blue Heart Forest"
}

-- Loop through each location and create a toggle for it
for _, location in ipairs(locations) do
    local Toggle = MainTab:CreateToggle({
        Name = location, -- Name of the toggle is the location name
        CurrentValue = false, -- Default value for the toggle (off)
        Flag = "Toggle_" .. location, -- Unique flag for each toggle
        Callback = function(Value)
            -- If the toggle is on, start looping the remote call
            if Value then
                while Value do
                    local targetLocation = location == "SPAWN" and workspace.LocalStars.SPAWN or workspace.LocalStars[location]
                    
                    -- Loop through each child of the current location
                    for _, child in ipairs(targetLocation:GetChildren()) do
                        local args = {
                            [1] = location,        -- Current location
                            [2] = child.Name       -- Name of the child as the second argument
                        }

                        -- Fire the server with the updated args
                        game:GetService("ReplicatedStorage").Core.Remote.collectStar:FireServer(unpack(args))

                        -- Wait a short time before sending the next remote call
                        wait()  -- Adjust the wait time as needed (e.g., 0.5 seconds)
                    end

                    -- Wait a short time before continuing the loop (to avoid too many rapid calls)
                    wait()  -- Adjust this as needed (e.g., 1 second)
                end
            end
        end,
    })
end



local MainTab = Window:CreateTab("Eggs", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Eggs")

local selectedEggs = {}  -- Table to store the selected egg names

for _, egg in pairs(workspace.EggModels:GetChildren()) do
    local Toggle = MainTab:CreateToggle({
        Name = egg.Name, -- Set the name of the toggle to the egg's name
        CurrentValue = false, -- Default value for the toggle (off)
        Flag = "Toggle_" .. egg.Name, -- Unique flag based on the egg's name
        Callback = function(Value)
            -- Loop or stop based on the toggle value
            if Value then
                -- Start looping the remote call
                while Value do
                    local args = {
                        [1] = egg.Name, -- Only one egg name at a time
                        [2] = "Open All" -- Always include the second argument
                    }

                    -- Invoke the server with the updated args
                    game:GetService("ReplicatedStorage").PetSystem.Remote.Hatch:InvokeServer(unpack(args))

                    -- Wait a short time before sending the next remote call
                    wait()  -- Adjust the wait time as needed (e.g., 1 second)
                end
            else
                -- If the toggle is off, stop the loop
                print(egg.Name .. " toggle is off, remote calls stopped.")
            end
        end,
    })
end
local MainTab = Window:CreateTab("Crafting", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Crafting")
local craftingEnabled = false

local Toggle = MainTab:CreateToggle({
   Name = "Auto Craft",
   CurrentValue = false,
   Flag = "AutoCraftToggle",
   Callback = function(Value)
       craftingEnabled = Value
       while craftingEnabled do
           local pets = game:GetService("Players").LocalPlayer.Data.Pets
           local groupedPets = {}

           for _, pet in pairs(pets:GetChildren()) do
               local id = pet:FindFirstChild("ID")
               local locked = pet:FindFirstChild("Locked")
               local tier = pet:FindFirstChild("Tier")

               if id and id:IsA("StringValue") and 
                  (not locked or not locked.Value) and 
                  tier and tier:IsA("NumberValue") and tier.Value == 0 then
                    
                   local petType = id.Value  -- Grouping by pet ID value
                   if not groupedPets[petType] then
                       groupedPets[petType] = {}
                   end
                   table.insert(groupedPets[petType], pet.Name)  -- Store pet instance name
               end
           end

           for _, petList in pairs(groupedPets) do
               while #petList >= 3 and craftingEnabled do
                   local args = { petList[1], petList[2], petList[3] }
                   game:GetService("ReplicatedStorage").PetSystem.Remote.CraftPets:InvokeServer(args)
                   
                   -- Remove used pets from the list
                   table.remove(petList, 1)
                   table.remove(petList, 1)
                   table.remove(petList, 1)
               end
           end
           wait(1) -- Add a short delay to prevent freezing/crashes
       end
   end,
})
