-- Load Rayfield library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
print("Rayfield loaded successfully")

-- Create Rayfield Window
local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    }
})

local MainTab = Window:CreateTab("Tab Example", 4483362458)
local Section = MainTab:CreateSection("Section Example")

-- Variables for toggles
local isRunning = false
local isJumping = false
local isCheckingZone = false
local hatchingEnabled = false
local player = game:GetService("Players").LocalPlayer
local petScore = player:WaitForChild("CurrentPetScore")
local shinyScore = player:WaitForChild("ShinyScore")
local checklist = player.PlayerGui.ScreenGui.Main.Left.Checklist
local maxRarity = 8
local rarityNames = { [1] = "Common", [2] = "Uncommon", [3] = "Rare", [4] = "Epic", [5] = "Legendary", [6] = "Prodigious", [7] = "Ascended", [8] = "Mythical" }
local maxCount = { [1] = 42, [2] = 48, [3] = 60, [4] = 48, [5] = 24, [6] = 6, [7] = 6, [8] = 6 }

-- Function to determine the zone number based on pet score and shiny level
local function getZoneNumber(score, shinyLevel)
    if score >= 210 and shinyLevel >= 100 then
        return 8
    elseif score > 175 then
        return 6
    elseif score > 120 then
        return 5
    elseif score > 75 then
        return 4
    elseif score > 40 then
        return 3
    elseif score > 15 then
        return 2
    else
        return 1
    end
end

-- Toggle: Auto Zone Check
MainTab:CreateToggle({
    Name = "Auto Zone Check",
    CurrentValue = false,
    Flag = "ToggleZoneCheck",
    Callback = function(Value)
        isCheckingZone = Value
        if Value then
            coroutine.wrap(function()
                while isCheckingZone do
                    local zoneNumber = getZoneNumber(petScore.Value, shinyScore.Value)
                    if zoneNumber == 8 then break
                    else game:GetService("ReplicatedStorage").Remotes.OnAreaButton:FireServer(zoneNumber) end
                    wait(1)
                end
            end)()
        end
    end,
})

-- Toggle: Auto Fuse
MainTab:CreateToggle({
    Name = "Auto Fuse",
    CurrentValue = false,
    Flag = "ToggleAutoFuse",
    Callback = function(Value)
        isRunning = Value
        if Value then
            coroutine.wrap(function()
                while isRunning do
                    local args = { [1] = {true, true, true, true, true, true, true, true} }
                    game:GetService("ReplicatedStorage").Remotes.AutoFuse:FireServer(unpack(args))
                    wait(1)
                end
            end)()
        end
    end,
})

-- Toggle: Auto Jump
MainTab:CreateToggle({
    Name = "Auto Jump",
    CurrentValue = false,
    Flag = "ToggleAutoJump",
    Callback = function(Value)
        isJumping = Value
        if Value then
            coroutine.wrap(function()
                while isJumping do
                    player.Character:WaitForChild("Humanoid").Jump = true
                    wait(0.1)
                end
            end)()
        end
    end,
})

-- Toggle: Auto Hatch
MainTab:CreateToggle({
    Name = "Auto Hatch",
    CurrentValue = false,
    Flag = "ToggleAutoHatch",
    Callback = function(Value)
        hatchingEnabled = Value
        if Value then
            coroutine.wrap(function()
                while hatchingEnabled do
                    local lowestUndoneRarity = nil
                    for rarity = 1, maxRarity do
                        local discoveredCount = tonumber(checklist[tostring(rarity)].DiscoveredLabel.Text:match("(%d+)")) or 0
                        if discoveredCount < maxCount[rarity] then
                            lowestUndoneRarity = rarity
                            break
                        end
                    end
                    if lowestUndoneRarity then
                        game:GetService("ReplicatedStorage").Remotes.BuyEgg:FireServer(lowestUndoneRarity)
                    end
                    wait(1)
                end
            end)()
        end
    end,
})

-- Button: Script 1
MainTab:CreateButton({
    Name = "Script 1",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/AliCode14/scripts/main/ScriptHub.lua'))()
    end,
})

-- Button: Anti-AFK
MainTab:CreateButton({
    Name = "Anti-AFK",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/abbxie/Scripts/refs/heads/main/Antiafk"))()
    end,
})

-- Button: Script 2
MainTab:CreateButton({
    Name = "Script 2",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CasperFlyModz/discord.gg-rips/main/CollectAllPets.lua"))()
    end,
})

-- Button: Equip Best
MainTab:CreateButton({
    Name = "Equip Best",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.EquipBest:FireServer()
    end,
})

-- Button: Remote Spy
MainTab:CreateButton({
    Name = "Remote Spy",
    Callback = function()
        loadstring(game:HttpGet("https://github.com/exxtremestuffs/SimpleSpySource/raw/master/SimpleSpy.lua"))()
    end,
})

-- Button: Remove Animations
MainTab:CreateButton({
    Name = "Remove Animations",
    Callback = function()
        local replicatedStorage = game:GetService("ReplicatedStorage")
        local lighting = game:GetService("Lighting")
        local starterGui = game:GetService("StarterGui")

        -- Move Lighting Blur to ReplicatedStorage
        if lighting:FindFirstChild("Blur") then
            lighting.Blur.Parent = replicatedStorage
        end

        -- Move PlayerGui elements to ReplicatedStorage
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui and playerGui:FindFirstChild("ScreenGui") then
            local screenGui = playerGui.ScreenGui
            if screenGui:FindFirstChild("Hatcher") then
                screenGui.Hatcher.Parent = replicatedStorage
            end
            if screenGui:FindFirstChild("AutoFuse") then
                screenGui.AutoFuse.Parent = replicatedStorage
            end
            if screenGui:FindFirstChild("Main") then
                if screenGui.Main:FindFirstChild("AutoFuse") then
                    screenGui.Main.AutoFuse.Parent = replicatedStorage
                end
                if screenGui.Main:FindFirstChild("Factory") then
                    screenGui.Main.Factory.Parent = replicatedStorage
                end
            end
        end

        -- Move StarterGui AutoFuse to ReplicatedStorage
        if starterGui:FindFirstChild("ScreenGui") and starterGui.ScreenGui:FindFirstChild("AutoFuse") then
            starterGui.ScreenGui.AutoFuse.Parent = replicatedStorage
        end

        -- Move LocalPlayer's AutoFuse to ReplicatedStorage
        if player:FindFirstChild("AutoFuse") then
            player.AutoFuse.Parent = replicatedStorage
        end
    end,
})
