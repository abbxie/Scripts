-- Load Rayfield library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() 
print("Rayfield loaded successfully")

-- Create Rayfield Window
local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    }
})

local MainTab = Window:CreateTab("Tab Example", 4483362458)
local Section = MainTab:CreateSection("Section Example")

-- Variables
local isRunning, isJumping, isCheckingZone, hatchingEnabled = false, false, false, false
local player = game:GetService("Players").LocalPlayer
local petScore = player:WaitForChild("CurrentPetScore")
local shinyScore = player:WaitForChild("ShinyScore")
local checklist = player.PlayerGui.ScreenGui.Main.Left.Checklist
local maxRarity, rarityNames, maxCount = 8, { [1] = "Common", [2] = "Uncommon", [3] = "Rare", [4] = "Epic", [5] = "Legendary", [6] = "Prodigious", [7] = "Ascended", [8] = "Mythical" }, { [1] = 42, [2] = 48, [3] = 60, [4] = 48, [5] = 24, [6] = 6, [7] = 6, [8] = 6 }

-- GUI for Displaying Messages
local gui, textLabel, minimizeButton = Instance.new("ScreenGui"), Instance.new("TextLabel"), Instance.new("TextButton")
textLabel.Size, textLabel.Position = UDim2.new(0, 400, 0, 300), UDim2.new(0.5, -200, 0.1, 0)
textLabel.BackgroundColor3, textLabel.BackgroundTransparency, textLabel.TextColor3, textLabel.TextScaled, textLabel.Text, textLabel.Parent = Color3.new(0, 0, 0), 0.5, Color3.new(1, 1, 1), true, "", gui
gui.Parent, minimizeButton.Size, minimizeButton.Position, minimizeButton.Text, minimizeButton.BackgroundColor3, minimizeButton.Parent = player.PlayerGui, UDim2.new(1, 0, 0, 25), UDim2.new(0, 0, 1, 0), "Minimize", Color3.new(0.5, 0.5, 0.5), textLabel

-- Dragging Functionality
local dragging, dragStart, startPos, UserInputService = false, nil, nil, game:GetService("UserInputService")
local function update(input)
    if dragging then
        local delta = input.Position - dragStart
        textLabel.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end
textLabel.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging, dragStart, startPos = true, input.Position, textLabel.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)
UserInputService.InputChanged:Connect(update)

-- Minimize/Restore GUI
local function minimize()
    if textLabel.Size == UDim2.new(0, 400, 0, 300) then textLabel.Size, textLabel.Text = UDim2.new(0, 400, 0, 50), "" 
    else textLabel.Size = UDim2.new(0, 400, 0, 300) end
end
minimizeButton.MouseButton1Click:Connect(minimize)

-- Determine Zone Based on Pet Score and Shiny Level
local function getZoneNumber(score, shinyLevel)
    if score >= 210 and shinyLevel >= 100 then return 8
    elseif score > 175 then return 6
    elseif score > 120 then return 5
    elseif score > 75 then return 4
    elseif score > 40 then return 3
    elseif score > 15 then return 2
    else return 1 end
end

-- Toggle for Zone Check
MainTab:CreateToggle({
    Name = "Auto Zone Check",
    CurrentValue = false,
    Flag = "ToggleZoneCheck",
    Callback = function(Value)
        isCheckingZone = Value
        if Value then coroutine.wrap(function()
            while isCheckingZone do
                local zoneNumber = getZoneNumber(petScore.Value, shinyScore.Value)
                if zoneNumber == 8 then break
                else game:GetService("ReplicatedStorage").Remotes.OnAreaButton:FireServer(zoneNumber) end
                wait(1)
            end
        end)() end
    end,
})

-- Toggle for Auto Fuse
MainTab:CreateToggle({
    Name = "Auto Fuse",
    CurrentValue = false,
    Flag = "ToggleAutoFuse",
    Callback = function(Value)
        isRunning = Value
        if Value then coroutine.wrap(function()
            while isRunning do
                game:GetService("ReplicatedStorage").Remotes.AutoFuse:FireServer({ true, true, true, true, true, true, true, true })
                wait(1)
            end
        end)() end
    end,
})

-- Toggle for Auto Jump
MainTab:CreateToggle({
    Name = "Auto Jump",
    CurrentValue = false,
    Flag = "ToggleAutoJump",
    Callback = function(Value)
        isJumping = Value
        if Value then coroutine.wrap(function()
            while isJumping do
                player.Character:WaitForChild("Humanoid").Jump = true
                wait(0.1)
            end
        end)() end
    end,
})

-- Toggle for Hatching
MainTab:CreateToggle({
    Name = "Toggle Hatching",
    CurrentValue = false,
    Flag = "ToggleHatching",
    Callback = function(Value)
        hatchingEnabled = Value
    end,
})

-- Main Loop for Hatching
spawn(function()
    while true do
        if hatchingEnabled then
            local outputMessages = {}
            for rarity = 1, maxRarity do
                local discoveredCount = tonumber(checklist[tostring(rarity)].DiscoveredLabel.Text:match("(%d+)")) or 0
                local message = rarityNames[rarity] .. ": " .. discoveredCount
                if discoveredCount < maxCount[rarity] then
                    game:GetService("ReplicatedStorage").Remotes.BuyEgg:FireServer(rarity)
                    message = message .. " (currently hatching)"
                end
                table.insert(outputMessages, message)
            end
            textLabel.Text = table.concat(outputMessages, "\n")
        else textLabel.Text = "Hatching is paused." end
        wait(1)
    end
end)
