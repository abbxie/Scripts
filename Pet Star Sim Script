local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() -- Load Rayfield library
print("Rayfield loaded successfully")

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Specify a folder name if needed
        FileName = "Big Hub"
    }
})

local MainTab = Window:CreateTab("Eggs", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Eggs")

local selectedEggs = {}  -- Table to store the selected egg names

for _, egg in pairs(workspace.EggModels:GetChildren()) do
    local Toggle = MainTab:CreateToggle({
        Name = egg.Name, -- Set the name of the toggle to the egg's name
        CurrentValue = false, -- Default value for the toggle (off)
        Flag = "Toggle_" .. egg.Name, -- Unique flag based on the egg's name
        Callback = function(Value)
            -- Loop or stop based on the toggle value
            if Value then
                -- Start looping the remote call
                while Value do
                    local args = {
                        [1] = egg.Name, -- Only one egg name at a time
                        [2] = "Open All" -- Always include the second argument
                    }

                    -- Invoke the server with the updated args
                    game:GetService("ReplicatedStorage").PetSystem.Remote.Hatch:InvokeServer(unpack(args))

                    -- Wait a short time before sending the next remote call
                    wait()  -- Adjust the wait time as needed (e.g., 1 second)
                end
            else
                -- If the toggle is off, stop the loop
                print(egg.Name .. " toggle is off, remote calls stopped.")
            end
        end,
    })
end
