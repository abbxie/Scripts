local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() -- Load Rayfield library
print("Rayfield loaded successfully")

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Specify a folder name if needed
        FileName = "Big Hub"
    }
})

local MainTab = Window:CreateTab("Tab Example", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Section Example")

-- Variables for toggles
local isRunning = false -- For Auto Fuse toggle
local isJumping = false -- For Auto Jump toggle
local isCheckingZone = false -- For Zone Checking toggle

local player = game:GetService("Players").LocalPlayer
local petScore = player:WaitForChild("CurrentPetScore")
local shinyScore = player:WaitForChild("ShinyScore")

-- Function to determine the zone number based on pet score and shiny level
local function getZoneNumber(score, shinyLevel)
    if score >= 210 and shinyLevel >= 100 then
        return 8
    elseif score > 175 then
        return 6
    elseif score > 120 then
        return 5
    elseif score > 75 then
        return 4
    elseif score > 40 then
        return 3
    elseif score > 15 then
        return 2
    else
        return 1
    end
end

-- Toggle: Start/Stop Zone Check
local ToggleZoneCheck = MainTab:CreateToggle({
    Name = "Auto Zone Check",
    CurrentValue = false,
    Flag = "ToggleZoneCheck",
    Callback = function(Value)
        isCheckingZone = Value
        if Value then
            coroutine.wrap(function()
                while isCheckingZone do
                    local zoneNumber = getZoneNumber(petScore.Value, shinyScore.Value)

                    -- Fire the event if the player hasn't yet reached zone 8
                    if zoneNumber == 8 then
                        break  -- Exit the loop once zone 8 is reached
                    else
                        local args = { [1] = zoneNumber }
                        game:GetService("ReplicatedStorage").Remotes.OnAreaButton:FireServer(unpack(args))
                    end

                    wait(1)  -- Wait before checking again
                end
            end)()
        end
    end,
})

-- Toggle 1: Auto Fuse
local Toggle1 = MainTab:CreateToggle({
    Name = "Toggle Example (Auto Fuse)",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        isRunning = Value
        if Value then
            coroutine.wrap(function()
                while isRunning do
                    local args = { [1] = {true, true, true, true, true, true, true, true} }
                    game:GetService("ReplicatedStorage").Remotes.AutoFuse:FireServer(unpack(args))
                    wait(1)
                end
            end)()
        end
    end,
})

-- Toggle 2: Auto Jump
local Toggle2 = MainTab:CreateToggle({
    Name = "Toggle Example (Auto Jump)",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        isJumping = Value
        if Value then
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoid = character:WaitForChild("Humanoid")

            coroutine.wrap(function()
                while isJumping do
                    humanoid.Jump = true
                    wait(0.1)
                end
            end)()
        end
    end,
})

-- Buttons for loading scripts and actions
MainTab:CreateButton({
    Name = "Script 1",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/AliCode14/scripts/main/ScriptHub.lua'))()
    end,
})

MainTab:CreateButton({
    Name = "Anti-AFK",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/abbxie/Scripts/refs/heads/main/Antiafk"))()
    end,
})

MainTab:CreateButton({
    Name = "Script 2",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CasperFlyModz/discord.gg-rips/main/CollectAllPets.lua"))()
    end,
})

MainTab:CreateButton({
    Name = "Equip Best",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.EquipBest:FireServer()
    end,
})

MainTab:CreateButton({
    Name = "Remote Spy",
    Callback = function()
        loadstring(game:HttpGet("https://github.com/exxtremestuffs/SimpleSpySource/raw/master/SimpleSpy.lua"))()
    end,
})

MainTab:CreateButton({
    Name = "Remove Animations",
    Callback = function()
        local replicatedStorage = game:GetService("ReplicatedStorage")
        local lighting = game:GetService("Lighting")
        local starterGui = game:GetService("StarterGui")

        -- Move Lighting Blur to ReplicatedStorage
        if lighting:FindFirstChild("Blur") then
            lighting.Blur.Parent = replicatedStorage
        end

        -- Move PlayerGui elements to ReplicatedStorage
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui and playerGui:FindFirstChild("ScreenGui") then
            local screenGui = playerGui.ScreenGui
            if screenGui:FindFirstChild("Hatcher") then
                screenGui.Hatcher.Parent = replicatedStorage
            end
            if screenGui:FindFirstChild("AutoFuse") then
                screenGui.AutoFuse.Parent = replicatedStorage
            end
            if screenGui:FindFirstChild("Main") then
                if screenGui.Main:FindFirstChild("AutoFuse") then
                    screenGui.Main.AutoFuse.Parent = replicatedStorage
                end
                if screenGui.Main:FindFirstChild("Factory") then
                    screenGui.Main.Factory.Parent = replicatedStorage
                end
            end
        end

        -- Move StarterGui AutoFuse to ReplicatedStorage
        if starterGui:FindFirstChild("ScreenGui") and starterGui.ScreenGui:FindFirstChild("AutoFuse") then
            starterGui.ScreenGui.AutoFuse.Parent = replicatedStorage
        end

        -- Move LocalPlayer's AutoFuse to ReplicatedStorage
        if player:FindFirstChild("AutoFuse") then
            player.AutoFuse.Parent = replicatedStorage
        end
    end,
})

-- Creating a new tab titled "Extra Tab" with an image ID
local MainTab2 = Window:CreateTab("Extra Tab", 4483362458) -- Title, Image
local Section2 = MainTab2:CreateSection("Hatching Controls")  -- Corrected the variable name

-- Toggle to control the hatching script
local hatchingEnabled = false

-- Create the toggle for hatching functionality
local Toggle = Section2:CreateToggle({
    Name = "Toggle Hatching",
    CurrentValue = false,
    Flag = "ToggleHatching", -- Unique flag for this toggle
    Callback = function(Value)
        hatchingEnabled = Value  -- Update the hatchingEnabled variable based on the toggle's state
    end,
})

local checklist = player.PlayerGui.ScreenGui.Main.Left.Checklist
local maxRarity = 8  -- Maximum rarity number

local rarityNames = {
    [1] = "Common",
    [2] = "Uncommon",
    [3] = "Rare",
    [4] = "Epic",
    [5] = "Legendary",
    [6] = "Prodigious",
    [7] = "Ascended",
    [8] = "Mythical"
}

local maxCount = {
    [1] = 42,
    [2] = 48,
    [3] = 60,
    [4] = 48,
    [5] = 24,
    [6] = 6,
    [7] = 6,
    [8] = 6,
}

-- Create a ScreenGui and TextLabel for displaying the messages
local gui = Instance.new("ScreenGui")
local textLabel = Instance.new("TextLabel")
local minimizeButton = Instance.new("TextButton")

-- Set properties for the TextLabel
textLabel.Size = UDim2.new(0, 400, 0, 300)  -- Width, Height
textLabel.Position = UDim2.new(0.5, -200, 0.1, 0)  -- Centered on the screen
textLabel.BackgroundColor3 = Color3.new(0, 0, 0)  -- Black background
textLabel.BackgroundTransparency = 0.5  -- Semi-transparent
textLabel.TextColor3 = Color3.new(1, 1, 1)  -- White text
textLabel.TextScaled = true  -- Scale text to fit the label
textLabel.TextWrapped = true  -- Wrap text to the next line
textLabel.Text = "Hatching: OFF"  -- Initial text
textLabel.Parent = gui  -- Parent to the ScreenGui

-- Set properties for the minimize button
minimizeButton.Size = UDim2.new(0, 100, 0, 50)  -- Width, Height
minimizeButton.Position = UDim2.new(0.5, -50, 0.9, 0)  -- Centered on the screen
minimizeButton.Text = "Minimize"  -- Button text
minimizeButton.Parent = gui  -- Parent to the ScreenGui

-- Function to toggle hatching
local function toggleHatching()
    if hatchingEnabled then
        textLabel.Text = "Hatching: ON"  -- Update the text to reflect hatching state
        while hatchingEnabled do
            for rarity = 1, maxRarity do
                local collected = checklist[tostring(rarity)].DiscoveredLabel.Text
                local currentCount = tonumber(collected:match("%d+")) or 0  -- Extract the number from the text

                -- Check if the player can hatch more pets of this rarity
                if currentCount < maxCount[rarity] then
                    local args = { [1] = rarity }  -- Create args for hatching
                    game:GetService("ReplicatedStorage").Remotes.BuyEgg:FireServer(unpack(args))  -- Call the hatching function
                    wait(0.1)  -- Short delay before hatching next pet
                end
            end
            wait(1)  -- Wait before repeating the cycle
        end
    else
        textLabel.Text = "Hatching: OFF"  -- Update the text to reflect hatching state
    end
end

-- Minimize button functionality
minimizeButton.MouseButton1Click:Connect(function()
    gui.Enabled = not gui.Enabled  -- Toggle the visibility of the GUI
    minimizeButton.Text = gui.Enabled and "Minimize" or "Maximize"  -- Update button text
end)

-- Function to check and update hatching state
local function checkHatching()
    while true do
        toggleHatching()
        wait(0.1)  -- Short wait to prevent high CPU usage
    end
end

-- Start the hatching check in a coroutine
coroutine.wrap(checkHatching)()

gui.Parent = game.Players.LocalPlayer.PlayerGui  -- Set the ScreenGui to the PlayerGui
