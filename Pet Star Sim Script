--loadstring(game:HttpGet('https://raw.githubusercontent.com/abbxie/Scripts/refs/heads/main/Pet%20Star%20Sim%20Script'))() 
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() -- Load Rayfield library
print("Rayfield loaded successfully")

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Specify a folder name if needed
        FileName = "Big Hub"
    }
})

local MainTab = Window:CreateTab("AutoFarm", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Autobuy Zone")

local running = false -- Variable to control the loop

local Toggle = MainTab:CreateToggle({
    Name = "Toggle Example",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        running = Value -- Update running state
        if running then
            while running do
                for _, location in ipairs({
                    "SPAWN", "Autumn Forest", "Flower Garden", "Snow Forest", "Tropical Palms",
                    "Mine Shaft", "Diamond Mine", "Magical Forest", "Sakura Forest", "Sakura Ravine",
                    "Magma Ravine", "Cloud Road", "Heaven", "Toxic Wasteland", "Sandy Star Bay",
                    "EVENT", "Heart Forest", "Green Heart Forest", "Blue Heart Forest"
                }) do
                    if not running then break end -- Exit loop if toggle is turned off
                    
                    local args = { [1] = location }
                    game:GetService("ReplicatedStorage"):WaitForChild("Core", 9e9)
                        :WaitForChild("Remote", 9e9)
                        :WaitForChild("buyLocation", 9e9)
                        :InvokeServer(unpack(args))
                    
                    task.wait() -- Prevents script from freezing; adjust delay as needed
                end
            end
        end
    end
})


local Section = MainTab:CreateSection("AutoFarm")
local locations = {
    "SPAWN", "Autumn Forest", "Flower Garden", "Snow Forest", "Tropical Palms",
    "Mine Shaft", "Diamond Mine", "Magical Forest", "Sakura Forest", "Sakura Ravine",
    "Magma Ravine", "Cloud Road", "Heaven", "Toxic Wasteland", "Sandy Star Bay",
    "EVENT", "Heart Forest", "Green Heart Forest", "Blue Heart Forest"
}

-- Store toggle states
local toggleStates = {}

for _, location in ipairs(locations) do
    toggleStates[location] = false -- Initialize toggle state

    local Toggle = MainTab:CreateToggle({
        Name = location,
        CurrentValue = false,
        Flag = "Toggle_" .. location,
        Callback = function(Value)
            toggleStates[location] = Value -- Update toggle state

            if Value then
                task.spawn(function() -- Run in a separate thread
                    while true do
                        if not toggleStates[location] then break end -- Break loop if toggle is off

                        local targetLocation = location == "SPAWN" and workspace.LocalStars.SPAWN or workspace.LocalStars[location]
                        
                        for _, child in ipairs(targetLocation:GetChildren()) do
                            if not toggleStates[location] then break end -- Break inner loop immediately

                            local args = {
                                [1] = location,
                                [2] = child.Name
                            }

                            game:GetService("ReplicatedStorage").Core.Remote.collectStar:FireServer(unpack(args))

                            task.wait() -- Adjust wait time as needed
                        end

                        task.wait() -- Additional delay to prevent excessive requests
                    end
                end)
            end
        end,
    })
end



local MainTab = Window:CreateTab("Eggs", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Eggs")

local toggleStates = {} -- Store toggle states

for _, egg in pairs(workspace.EggModels:GetChildren()) do
    toggleStates[egg.Name] = false -- Initialize toggle state

    local Toggle = MainTab:CreateToggle({
        Name = egg.Name,
        CurrentValue = false,
        Flag = "Toggle_" .. egg.Name,
        Callback = function(Value)
            toggleStates[egg.Name] = Value -- Update toggle state

            if Value then
                task.spawn(function() -- Run in a separate thread
                    while true do
                        if not toggleStates[egg.Name] then break end -- Break loop if toggle is off

                        local args = {
                            [1] = egg.Name,
                            [2] = "Open x3"
                        }

                        game:GetService("ReplicatedStorage").PetSystem.Remote.Hatch:InvokeServer(unpack(args))

                        task.wait() -- Adjust the wait time as needed
                    end
                end)
            else
                print(egg.Name .. " toggle is off, remote calls stopped.")
            end
        end,
    })
end

local Section = MainTab:CreateSection("Remove hatching animation")
local ToggleDeleteFrame = MainTab:CreateToggle({
   Name = "Remove Hatching Frame",
   CurrentValue = false,
   Flag = "DeleteHatchingFrameToggle",
   Callback = function(Value)
       if Value then
           local hatchingFrame = game:GetService("Players").LocalPlayer.PlayerGui.EggSystem:FindFirstChild("HatchingFrame")
           if hatchingFrame then
               hatchingFrame:Destroy()
           end
       end
   end,
})
local MainTab = Window:CreateTab("Crafting", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Crafting")
local craftingEnabled = false

local Toggle = MainTab:CreateToggle({
    Name = "Auto Craft",
    CurrentValue = false,
    Flag = "AutoCraftToggle",
    Callback = function(Value)
        craftingEnabled = Value

        if Value then
            task.spawn(function() -- Run in a separate thread
                while craftingEnabled do
                    local pets = game:GetService("Players").LocalPlayer.Data.Pets
                    local groupedPets = {}

                    for _, pet in pairs(pets:GetChildren()) do
                        if not craftingEnabled then break end -- Break immediately if toggle is off

                        local id = pet:FindFirstChild("ID")
                        local locked = pet:FindFirstChild("Locked")
                        local tier = pet:FindFirstChild("Tier")

                        if id and id:IsA("StringValue") and 
                            (not locked or not locked.Value) and 
                            tier and tier:IsA("NumberValue") and tier.Value == 0 then
                            
                            local petType = id.Value -- Grouping by pet ID value
                            if not groupedPets[petType] then
                                groupedPets[petType] = {}
                            end
                            table.insert(groupedPets[petType], pet.Name) -- Store pet instance name
                        end
                    end

                    for _, petList in pairs(groupedPets) do
                        while #petList >= 3 and craftingEnabled do
                            local args = { petList[1], petList[2], petList[3] }
                            game:GetService("ReplicatedStorage").PetSystem.Remote.CraftPets:InvokeServer(args)
                            
                            -- Remove used pets from the list
                            table.remove(petList, 1)
                            table.remove(petList, 1)
                            table.remove(petList, 1)

                            if not craftingEnabled then break end -- Break crafting if toggle is off
                        end
                    end

                    task.wait(1) -- Short delay to prevent freezing/crashes
                end
            end)
        end
    end,
})


local MainTab = Window:CreateTab("Misc", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("Potion Section")

-- Define potions
local potions = {"Stars", "Luck", "Gems", "XP"}

-- Create the toggle for activating/deactivating the loop
local Toggle = MainTab:CreateToggle({
    Name = "Potion Use Toggle",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        if Value then
            -- Start using potions when toggle is on
            while Value do
                -- Use the potions in the list
                for _, potion in ipairs(potions) do
                    for i = 1, 4 do
                        local args = {
                            [1] = potion .. " T" .. i;
                        }

                        game:GetService("ReplicatedStorage"):WaitForChild("Core", 9e9):WaitForChild("Remote", 9e9):WaitForChild("usePotion", 9e9):InvokeServer(unpack(args))
                    end
                end

                -- Use the "Treasure Hunter" potions
                for i = 1, 2 do
                    local args = {
                        [1] = "Treasure Hunter T" .. i;
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Core", 9e9):WaitForChild("Remote", 9e9):WaitForChild("usePotion", 9e9):InvokeServer(unpack(args))
                end

                -- Optional: add a small delay to prevent spamming requests too quickly
                wait() -- Delay in seconds before running again
            end
        end
    end,
})

local Section = MainTab:CreateSection("Gift Claiming")

local isLooping = false  -- Boolean to track if the loop should run

-- Create the toggle for activating/deactivating the loop
local Toggle = MainTab:CreateToggle({
    Name = "Claim Gifts Toggle",
    CurrentValue = false,
    Flag = "ClaimGiftToggle", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        isLooping = Value  -- Set the loop status based on the toggle value

        if isLooping then
            -- Start the loop when the toggle is turned on
            while isLooping do
                for i = 1, 16 do
                    local args = {
                        [1] = i  -- Pass the current index as the argument
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("Core", 9e9):WaitForChild("Remote", 9e9):WaitForChild("claimGift", 9e9):InvokeServer(unpack(args))
                    wait(0.5)  -- Add a small delay to prevent spamming requests
                end
            end
        end
    end,
})

local Section = MainTab:CreateSection("Auto Claim Level Road")
local ToggleLevelRoadClaim = MainTab:CreateToggle({
    Name = "Claim Level Road Toggle",
    CurrentValue = false,
    Flag = "ClaimLevelRoadToggle", -- A flag for this toggle
    Callback = function(Value)
        isLevelRoadLooping = Value  -- Set the loop status based on the toggle value

        if isLevelRoadLooping then
            -- Start the level road claiming loop when the toggle is turned on
            while isLevelRoadLooping do
                local args = {}  -- Define the arguments (if you need to customize it, add values here)

                game:GetService("ReplicatedStorage"):WaitForChild("Core", 9e9):WaitForChild("Remote", 9e9):WaitForChild("claimLevelRoad", 9e9):InvokeServer(unpack(args))
                wait(0.5)  -- Adjust the wait time as needed
            end
        end
    end,
})
